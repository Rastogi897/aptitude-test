{{#content "body"}}

<div class="mx-auto mt-2 max-w-5xl">
  {{!-- Timer --}}
  <div class="timer md:flex justify-between ml-9 mr-9 mb-6 bg-white py-2 sticky top-0 z-10 rounded-md px-2">
    <h3 class="text-lg md:text-3xl font-bold tracking-wide text-blue-500 mt-1 text-center md:text-left">{{certData.title}}</h3>
    <div class="flex justify-center">
    <div class="text-center px-4 py-1 mt-1 border-2 border-blue-500 font-semibold text-md tracking-wider rounded-full timer__display bg-white text-gray-900">
      <span> Time left : </span>
      <span class="timer__minutes">{{time}}</span>:<span class="timer__seconds">00</span> min
    </div>
    <a href="/" class="text-center px-4 py-1 mt-1 border-2 border-gray-800 ml-2 font-semibold text-md tracking-wider rounded-full timer__display bg-gray-800 text-gray-50">Exit Test</a>
    </div>
    <div class="total_time hidden">
      Total Time: <span class="total_in_min">00</span> min
    </div>
  </div>
	<div class="space-y-16 px-10">
		{{> test-data}}
	</div>

  {{!-- HTML Modal, initially hidden --}}
  <div class="modal flex flex-col justify-center bg-black/40 items-center p-4 fixed top-0 bottom-0 left-0 right-0 hidden">
    <div class="modal__content w-1/2 flex flex-col items-center justify-center bg-white text-black p-4 rounded-md">
      <div class="modal__text text-lg font-semibold">
        Your Time is over. Click submit to evaluate your score.
      </div>
      {{!-- <div class="modal__button flex justify-center mt-3 "> --}}
        <button class="modal__button__ok inline-block bg-blue-600 text-white mt-3 px-4 py-1 rounded-full font-semibold">Submit</button>
      {{!-- </div> --}}
    </div>
  </div>


{{!-- <nav class="flex items-center justify-between border-t border-gray-400 bg-gray-200 px-4 py-3 sm:px-6 mt-20" aria-label="Pagination">
  <div class="hidden sm:block">
    <p class="text-sm text-gray-700 font-bold">
      Showing
      <span class="font-medium">{{from}}</span>
      to
      <span class="font-medium">{{to}}</span>
      of
      <span class="font-medium">{{total}}</span>
      results
    </p>
  </div>
  <div class="flex flex-1 justify-between sm:justify-end">
    {{#if prevUrl}}<a href="{{prevUrl}}" class="relative inline-flex items-center rounded-md border border-gray-300 bg-gray-800 px-4 py-2 text-sm font-medium text-gray-100 hover:bg-gray-900">Previous</a>{{/if}}
    {{#if nextUrl}}<a href="{{nextUrl}}" class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-gray-800 px-4 py-2 text-sm font-medium text-gray-100 hover:bg-gray-900">Next</a>{{/if}}
  </div>
</nav> --}}


</div>





<div class="flex w-full justify-center pb-6">
  <button class="text-md submit-btn px-4 py-2 rounded-md font-semibold mt-6 bg-blue-500 text-white">Submit Test</button>
</div>


<div class="mt-6 w-full flex justify-center pb-4">
  <dl class="grid grid-cols-2 md:grid-cols-4 gap-x-8 md:gap-x-12 gap-y-4 px-4">
    <div class="border-t-2 border-gray-200 pt-2 correctAnswers hidden">
      <dt class="text-base font-medium text-gray-800">Your score:</dt>
      <dd class="text-xl md:text-xl font-bold tracking-tight text-blue-500 adata hidden"></dd>
    </div>

    <div class="border-t-2 border-gray-200 pt-2 totalquestion hidden">
      <dt class="text-base font-medium text-gray-800">Total no. of questions:</dt>
      <dd class="text-xl md:text-xl font-bold tracking-tight text-blue-500 bdata hidden"></dd>
    </div>

    <div class="border-t-2 border-gray-200 pt-2 answered hidden">
      <dt class="text-base font-medium text-gray-800">Answered questions:</dt>
      <dd class="text-xl md:text-xl font-bold tracking-tight text-blue-500 cdata hidden"></dd>
    </div>

    <div class="border-t-2 border-gray-200 pt-2 unanswered hidden">
      <dt class="text-base font-medium text-gray-800">Unanswered questions:</dt>
      <dd class="text-xl md:text-xl font-bold tracking-tight text-blue-500 ddata hidden"></dd>
    </div>
  </dl>
  <br>
</div>




{{!-- download cert button --}}
<div class="text-center">
    <button id="modal-button" class="text-gray-900 bg-gray-100 rounded-md py-2 px-4 font-semibold border-2 border-gray-300 certButton hidden text-sm hover:border-gray-400 duration-150">Download Certificate</button>
</div>

<div class="border-b-2 pt-6 border-gray-200"></div>

{{!-- certificate modal --}}

<div  id="modal"  class="hidden bg-black/50 w-full fixed top-0 flex bottom-0 left-0 right-0 z-[999]">
  <div class="flex flex-1 items-center justify-center">
    {{!-- <div class="bg-gray-500 opacity-10 fixed w-full h-full top-0 left-0"></div> --}}
    <div class="bg-gray-100 w-full max-w-[35%] rounded shadow-lg px-8 py-4 m-4">
      <div class="text-right">
        <button id="close-button" class="text-gray-500 cursor-pointer">x</button>
      </div>
      {{!-- <h1 class="text-2xl font-bold mb-4">Modal Title</h1> --}}
      
      <label for="website-admin" class="block mb-2 text-sm font-medium text-gray-900">Enter full name</label>
      <div class="flex">
        <input type="text" id="name" class="rounded-lg bg-white border text-gray-900 focus:ring-blue-500 focus:border-blue-500 block flex-1 min-w-0 w-full text-sm border-gray-300 p-2.5" placeholder="Siddharth">
      </div>

      <label for="input-group-1" class="block mb-2 text-sm font-medium text-gray-900 pt-6">Enter Email</label>
      <div class="mb-6">
        <input type="text" id="email" class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" placeholder="sid02@gmail.com">
      </div>
      
      <div class="flex justify-center">
        <button class="bg-blue-500 text-white text-md py-2 px-4 rounded-full font-semibold" id="generate">Confirm</button>
      </div>
    </div>
  </div>
</div>




{{!-- When I click on the Submit button above, the submitted answers in the test-data.hbs file is evaluated and appropriate javascript code is run to display correct answers / total answers --}}

	<script>
    var q = {{{JSONstringify questions}}};
    var time_in_min = {{{JSONstringify time}}}
    let count = 0;
    const qu  = document.querySelectorAll('.iquestion')
    const tot = qu.length;

    // function to evaluate answers
    function evaluateAnswers() {
      
      let noans = 0;

      const questions  = document.querySelectorAll('.iquestion')
      const total = questions.length;

      for(let  i=0; i<total; i++) {
          // let correctOption = questions[i].querySelector('.iquestion-ans').innerText[0]
          let correctOption = q[i].correctAnswer;

          // reveals answer
          questions[i].querySelectorAll('button')[1].click();

          let fieldset = questions[i].querySelector('fieldset');
          
          let selectedOptions;
          if(correctOption.length == 1) {
            selectedOptions = fieldset.querySelector('input[type="radio"]:checked')

            // if no option is selected
            if(selectedOptions == null){
              noans++;
              continue;
            }

            // if selected option is correct, increment count
            if(Number(selectedOptions.ariaColIndex) + 1 == correctOption[0])
                count++;
          } else {
            selectedOptions = fieldset.querySelectorAll('input[type="checkbox"]:checked')

            // if no option is selected
            if(selectedOptions == null) continue;

            // if selected option is correct, increment count
            if(selectedOptions.length == correctOption.length) {
              let flag = true;
              for(let j=0; j<selectedOptions.length; j++) {
                if(Number(selectedOptions[j].ariaColIndex) + 1 != correctOption[j]) {
                  flag = false;
                  break;
                }
              }
              if(flag) count++;
            }
          }
      }

      const correctAnswersBox = document.querySelector('.correctAnswers');
      const a = document.querySelector('.adata');
      a.innerText = `${count}/${total}`;
      correctAnswersBox.classList.remove('hidden');
      a.classList.remove('hidden');

      const totalAnswersBox = document.querySelector('.totalquestion');
      const b = document.querySelector('.bdata');
      b.innerText = `${total}`;
      totalAnswersBox.classList.remove('hidden')
      b.classList.remove('hidden');

      const AnsweredBox = document.querySelector('.answered');
      const c = document.querySelector('.cdata');
      c.innerText = `${total-noans}`;
      AnsweredBox.classList.remove('hidden')
      c.classList.remove('hidden');

      const unansweredBox = document.querySelector('.unanswered');
      const d = document.querySelector('.ddata');
      d.innerText = `${noans}`;
      unansweredBox.classList.remove('hidden')
      d.classList.remove('hidden');
    }

    // update timer every second
    let timer = document.querySelector('.timer');
    let minutes = timer.querySelector('.timer__minutes');
    let seconds = timer.querySelector('.timer__seconds');
    let totalTime = timer.querySelector('.total_in_min');
    let time = time_in_min * 60;
    totalTime.innerText = Math.floor(time / 60);
    let interval  = setInterval(function() {
      time--;
      minutes.innerText = Math.floor(time / 60);
      seconds.innerText = time % 60;
      if(time == 0) {
        clearInterval(interval);
        timeOver();
      }
      // console.log(time);
    }, 1000);

    // function to handle time over
    function timeOver() {
      // display modal
      let modal = document.querySelector('.modal');
      modal.classList.remove('hidden');
      modal.querySelector('button').addEventListener('click', function() {
        modal.classList.add('hidden');
        evaluateAnswers();
        disableAll();
      });
    }

    // function to disable all radio  buttons and checkboxes
    function disableAll() {
      let questions  = document.querySelectorAll('.iquestion')
      const total = questions.length;

      for(let  i=0; i<total; i++) {
          let fieldset = questions[i].querySelector('fieldset');
          let inputs = fieldset.querySelectorAll('input[type="radio"], input[type="checkbox"]');
          for(let j=0; j<inputs.length; j++) {
            inputs[j].disabled = true;
          }
      }
    }

    // handing  submit button click event
    let submitBtn = document.getElementsByClassName('submit-btn')[0];
    submitBtn.addEventListener('click', function() {
      evaluateAnswers();
      clearInterval(interval);
      disableAll();
    });


    function showmodal() {
      const certButton = document.querySelector('.certButton');
      certButton.classList.remove('hidden');
    }
    submitBtn.addEventListener('click', function() {
      showmodal();
    })


    // certificate js

    const modalButton = document.getElementById("modal-button");
    const closeButton = document.getElementById("close-button");
    const modal = document.getElementById("modal");

    // Show the modal when the button is clicked
    modalButton.addEventListener("click", function() {
      modal.classList.remove("hidden");
    });

    // Hide the modal when the close button is clicked
    closeButton.addEventListener("click", function() {
      modal.classList.add("hidden");
    });


  // certificate creation

  const generateBtn = document.getElementById('generate');
  const nameInput = document.getElementById('name');
  const emailInput = document.getElementById('email');

  generateBtn.addEventListener("click", (event) => {
      if (nameInput.value === "" || emailInput.value === "") {
        event.preventDefault(); // prevent form submission
        // display an error message or alert the user to fill in both fields
      }
      else{
      const name = nameInput.value;
      const email = emailInput.value;
      const canvas = document.createElement('canvas');
      canvas.width = 1300;
      canvas.height = 900;
      const ctx = canvas.getContext('2d');
      ctx.fillStyle = 'white';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.strokeStyle = '#3b82f6';
      ctx.lineWidth = 10;
      ctx.strokeRect(5, 5, canvas.width - 10, canvas.height - 10);
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';

      ctx.font = 'Bold 64px Trebuchet MS';
      ctx.fillStyle = '#3b82f6';
      ctx.fillText(`🏅Certificate of Completion`, canvas.width / 2, canvas.height / 2 - 290);
      ctx.font = 'Bold 30px Trebuchet MS';
      ctx.fillText(`______________`, canvas.width / 2, canvas.height / 2 - 240);
      //ctx.font = 'Bold 40px Trebuchet MS';
      //ctx.fillStyle = 'black';
      //ctx.fillText(`CERTIFICATE OF COMPLETION`, canvas.width / 2, canvas.height / 2 - 125);
      //ctx.font = '25px Trebuchet MS';
      //ctx.fillText(`on successful completion`, canvas.width / 2, canvas.height / 2 - 85);

      ctx.fillStyle = 'black';
      ctx.font = '26px Trebuchet MS';
      ctx.fillText(`This certificate is awarded to`, canvas.width / 2, canvas.height / 2 - 125);
      ctx.font = 'Italic 45px Trebuchet MS';
      ctx.fillStyle = '#3b82f6';
      ctx.fillText(`${name}`, canvas.width / 2, canvas.height / 2 -65);
      ctx.font = '20px Trebuchet MS';
      ctx.fillText(`${email}`, canvas.width / 2, canvas.height / 2 -25);
      ctx.font = '26px Trebuchet MS';
      ctx.fillStyle = 'Black';
      ctx.fillText(`for successfully completing the {{certData.title}}`, canvas.width / 2, canvas.height / 2 + 25);
      ctx.fillText(`with score of ${count} out of ${tot}`, canvas.width / 2, canvas.height / 2 + 70);

      ctx.font = '45px Trebuchet MS';
      ctx.fillText(`* * * * * * *`, canvas.width / 2, canvas.height / 2 + 225);
      ctx.font = '22px Trebuchet MS';
      ctx.fillStyle = 'Black';
      ctx.fillText(`Certified by`, canvas.width / 2, canvas.height / 2 + 260);
      ctx.font = 'Bold 30px Trebuchet MS';
      ctx.fillStyle = '#3b82f6';
      ctx.fillText(`Employment Aptitude Test`, canvas.width / 2, canvas.height / 2 + 300);


      const dataURL = canvas.toDataURL();
      const link = document.createElement("a");
      link.href = dataURL;
      link.download = `certificate-${name}.png`;
      link.click();
      }
  });



	</script>
{{/content}}